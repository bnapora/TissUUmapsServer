import argparse
import os
import sys

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler


def parse_args():
    parser = argparse.ArgumentParser(description="Convert Giotto output to CSV")
    parser.add_argument(
        "--path",
        dest="path",
        help="path to the GiottoViewer folder",
        default=None,
        type=str,
    )
    parser.add_argument(
        "--rescale",
        dest="rescale",
        help="rescaling UMAP output",
        default=True,
        type=bool,
    )

    if len(sys.argv) < 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()
    return args


if __name__ == "__main__":

    args = parse_args()

    data_path = args.path

    # Read the necessary .txt files generated by the exportGiottoViewer(...) function
    centroid_locations = pd.read_csv(
        os.path.join(data_path, "centroid_locations.txt"), header=None
    )
    umap_umap_dim_coord = pd.read_csv(
        os.path.join(data_path, "umap_umap_dim_coord.txt"), header=None
    )

    HMRF_k20_b_30_annot_information = pd.read_csv(
        os.path.join(data_path, "HMRF_k20_b.30_annot_information.txt"), header=None
    )
    HMRF_k20_b_40_annot_information = pd.read_csv(
        os.path.join(data_path, "HMRF_k20_b.40_annot_information.txt"), header=None
    )
    leiden_clus_annot_information = pd.read_csv(
        os.path.join(data_path, "leiden_clus_annot_information.txt"), header=None
    )

    # Define the columns for the CSV
    columns = [
        "image_X",
        "image_Y",
        "UMAP_X",
        "UMAP_Y",
        "leiden_clustering",
        "HMRF_k20_b_30_annot_information",
        "HMRF_k20_b_40_annot_information",
    ]

    # Retrieve the coordinates from the text file
    image_coord = []
    umap_coord = []
    for i in range(len(centroid_locations)):
        image_coord.append(centroid_locations[0][i].split())
        umap_coord.append(umap_umap_dim_coord[0][i].split())

    # Merge all the files into a DataFrame
    coords = np.hstack([image_coord, umap_coord]).astype(float)
    coords[:, 1] = np.abs(coords[:, 1])
    results = np.stack(
        [
            leiden_clus_annot_information[0],
            HMRF_k20_b_30_annot_information[0],
            HMRF_k20_b_40_annot_information[0],
        ]
    ).transpose()
    df = pd.DataFrame(data=np.hstack([coords, results]), columns=columns)

    # If wanted, rescale the UMAP coordinates to the images coordinates range
    if args.rescale == True:
        df.UMAP_X = pd.DataFrame(
            MinMaxScaler((df.image_X.min(), df.image_X.max())).fit_transform(
                np.expand_dims(df.UMAP_X, 1)
            )
        )
        df.UMAP_Y = pd.DataFrame(
            MinMaxScaler((df.image_Y.min(), df.image_Y.max())).fit_transform(
                np.expand_dims(df.UMAP_Y, 1)
            )
        )

    # Create CSV
    df.to_csv(os.path.join(data_path, "giotto_tissuumaps.csv"))
